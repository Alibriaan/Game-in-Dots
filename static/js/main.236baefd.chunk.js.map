{"version":3,"sources":["logo.svg","store/store.js","field/Field.jsx","interval/Interval.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Store","name","currMode","leaderBoard","undefined","squareList","gameStatus","score","player","computer","gameClass","Map","changeName","event","target","value","changeMode","data","mode","arr","Array","field","fill","startGame","map","randCurrBlock","changeColor","item","index","String","currentTarget","dataset","div_id","CheckWinner","fetch","method","headers","body","JSON","stringify","winner","date","moment","format","rand","Math","floor","random","length","gameReactions","a","axios","get","key","requ","set","fetchData","decorate","observable","action","m","createContext","Field","observer","props","localStore","useContext","store","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","useInterval","console","log","className","Fragment","disabled","onChange","selected","hidden","Object","keys","type","onClick","data-div_id","slice","App","Boolean","window","location","hostname","match","Root","path","exact","component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.236baefd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","\r\nimport { observable, action, decorate } from 'mobx';\r\nimport { createContext } from 'react'\r\nimport axios from 'axios';\r\nimport moment from 'moment';\r\n\r\nclass Store {\r\n  constructor () \r\n  {\r\n     const fetchData = async () =>\r\n    {\r\n        let requ = await axios.get('http://starnavi-frontend-test-task.herokuapp.com/game-settings');\r\n            this.mode = requ.data;\r\n\r\n            for(let key in requ.data)\r\n            {\r\n                this.gameClass.set(key , key);\r\n            }\r\n\r\n            requ = await axios.get('http://starnavi-frontend-test-task.herokuapp.com/winners');\r\n            this.leaderBoard = requ.data;\r\n        }\r\n        \r\n        fetchData();\r\n}\r\n\r\n mode;\r\n name = 'Player';\r\n currMode = { name: \"Pick game mode\" };\r\n leaderBoard = undefined;\r\n squareList = undefined;\r\n gameStatus = false;\r\n score = {player: 0 , computer: 0};\r\n gameClass = new Map();\r\n\r\n// Функция смены имени ( Меняет имя на то которое введенно в поисковой строке )\r\n  changeName = (event) =>\r\n {\r\n    this.name = event.target.value;\r\n }\r\n \r\n // Функция смены режима игры ( Меняет режим игры и пересоздает поле в зависимости от типа)\r\nchangeMode = (event) => {\r\n\r\n    this.squareList = [];\r\n    let data = this.mode[event.target.value];\r\n    this.currMode = {name: event.target.value , data};\r\n    let arr =new Array(data.field * data.field).fill('nothing');\r\n    this.squareList =  arr;\r\n}\r\n\r\n// Функция старта игры ( Проверяет режим игры обнуляет поле, обнуляет статистику игрока и компютера , Если режим игры стандартный игнорирует)\r\n startGame = () =>\r\n {\r\n\r\n    if(this.currMode.name !== \"Pick game mode\")\r\n    {\r\n\r\n    this.squareList = this.squareList.map( () => 'nothing');\r\n    this.score = { player: 0 , computer: 0};\r\n    this.gameStatus = true;\r\n    this.randCurrBlock();\r\n    }\r\n  }\r\n\r\n  // Функция смены цвета блока при клике ( Проходит массив если индек кликнутого current изменяет на success и дает поинт игроку иначе игнорирует)\r\n  changeColor = (event) => {\r\n\r\n\r\n    this.squareList = this.squareList.map(  (item , index) =>\r\n     {\r\n          if(String(index+1) === String(event.currentTarget.dataset.div_id) && item === 'current' )\r\n          {\r\n              this.score = {\r\n                  player: this.score.player+1,\r\n                  computer: this.score.computer \r\n              };\r\n              this.CheckWinner();\r\n\r\n              return 'success';\r\n          }\r\n          else\r\n          {\r\n              return item;\r\n          }\r\n        });\r\n  }\r\n\r\n  // Функция проверки статистики игры ( Проверяет достигнут ли предел в 50% - меняет гейм статус (проверка победы , поражения , ничья ) - отправка результата на сервер)\r\n\r\n  CheckWinner = () =>\r\n  {\r\n\r\n\r\n    if (( this.score.player + this.score.computer) === +(this.currMode.data.field * this.currMode.data.field))\r\n    {\r\n          this.gameStatus = false;\r\n\r\n          fetch( 'http://starnavi-frontend-test-task.herokuapp.com/winners',\r\n          {\r\n              method: \"POST\",\r\n              headers: {\r\n                  'Content-Type': 'application/json',\r\n              },\r\n              body: JSON.stringify({winner: 'Tie', date: moment().format('HH:mm; DD MMMM YYYY')}),\r\n          }\r\n      )\r\n\r\n    }\r\n    else if( +this.score.player > +(this.currMode.data.field * this.currMode.data.field / 2))\r\n              {\r\n                  this.gameStatus = false;\r\n\r\n        \r\n                  fetch( 'http://starnavi-frontend-test-task.herokuapp.com/winners',\r\n                    {\r\n                        method: \"POST\",\r\n                        headers: {\r\n                            'Content-Type': 'application/json',\r\n                        },\r\n                        body: JSON.stringify({winner: this.name, date: moment().format('HH:mm; DD MMMM YYYY')}),\r\n                    }\r\n                )\r\n              }\r\n      else if( +this.score.computer > +(this.currMode.data.field * this.currMode.data.field / 2))\r\n      {\r\n          this.gameStatus = false;\r\n          fetch( 'http://starnavi-frontend-test-task.herokuapp.com/winners',\r\n          {\r\n              method: \"POST\",\r\n              headers: {\r\n                  'Content-Type': 'application/json',\r\n              },\r\n              body: JSON.stringify({winner: 'Computer', date: moment().format('HH:mm; DD MMMM YYYY')}),\r\n          }\r\n      )\r\n      }\r\n  }\r\n\r\n\r\n  // Функция первого текущего квадрата при старте игры\r\n  randCurrBlock = () =>\r\n    {\r\n        let rand = Math.floor(Math.random() * this.squareList.length);\r\n\r\n        while( this.squareList[rand] !== 'nothing')\r\n        {\r\n            rand = Math.floor(Math.random() * this.squareList.length);\r\n        }\r\n        \r\n        let arr = this.squareList.map(( (item , index) => {\r\n            if(String(index) === String(rand))\r\n            {\r\n                return 'current';\r\n            }\r\n            else\r\n            {\r\n                return item;\r\n            }\r\n        }));\r\n\r\n        this.squareList = arr;\r\n    }\r\n\r\n// Функция игрового процесса ( Ищет текущий элемент - если есть компютер получает поинт после проверки на победу делает рандомный элемент текущим)\r\n     gameReactions = () =>{\r\n\r\n        this.squareList = this.squareList.map( (item , index) => {\r\n            if(item === 'current')\r\n            {\r\n                this.score = {\r\n                    player: this.score.player,\r\n                    computer: this.score.computer + 1 \r\n                };\r\n\r\n                this.CheckWinner();\r\n                return 'fail';\r\n            }\r\n            else\r\n            {\r\n                return item;\r\n            }\r\n        });\r\n\r\n\r\n        if(this.gameStatus)\r\n        {\r\n\r\n        let rand = Math.floor(Math.random() * this.squareList.length);\r\n        \r\n        while( this.squareList[rand] !== 'nothing')\r\n        {\r\n            rand = Math.floor(Math.random() * this.squareList.length);\r\n        }\r\n\r\n        this.squareList = this.squareList.map( (item , index) => {\r\n            \r\n            if(String(index) === String(rand))\r\n            {\r\n                return 'current';\r\n            }\r\n            else\r\n            {\r\n                return item;\r\n            }\r\n        });\r\n    };\r\n\r\n}\r\n}   \r\n\r\n// Декорация свойств и методов\r\ndecorate(Store, {\r\n  mode: observable,\r\n  name: observable,\r\n  currMode: observable,\r\n  leaderBoard: observable,\r\n  squareList: observable,\r\n  gameStatus: observable,\r\n  gameClass: observable,\r\n  score: observable,\r\n  changeName: action,\r\n  changeMode: action,\r\n  startGame: action,\r\n  changeColor: action,\r\n  CheckWinner: action,\r\n  randCurrBlock: action,\r\n  gameReactions: action,\r\n})\r\n\r\n// Создание экземпляра\r\nconst m = new Store();\r\n// Експорт и привязка контекста\r\nexport default createContext(m);\r\n","import './Field.css';\r\n\r\nimport useInterval from '../interval/Interval';\r\n\r\nimport React, { useContext , useEffect } from 'react'\r\nimport store from '../store/store'\r\nimport { observer } from 'mobx-react'\r\n\r\nimport moment from 'moment';\r\n\r\n//let number = 0 ;\r\nconst Field = observer((props) => {\r\n\r\n\r\n    const localStore = useContext(store);\r\n\r\n    useInterval(() => {\r\n        if(localStore.gameStatus === true)\r\n         {\r\n            localStore.gameReactions();\r\n         }\r\n\r\n      }, (localStore.gameStatus ) ? localStore.currMode.data.delay : 1000);\r\n\r\n\r\n\r\n     useEffect( () => {\r\n            console.log(\"Pererender\");\r\n            console.log(\"Player-\"  + localStore.score.player + \"   Computer-\" + localStore.score.computer  );\r\n            \r\n            //let data = new Date();\r\n\r\n           // console.log( data.getHours()+ \":\" + data.getMinutes() +\"; \"+ data.toLocaleDateString( 'en-GB' ,{  day : 'numeric'}) + \" \" + data.toLocaleDateString( 'en-GB' ,{  month : 'long'}) + \" \" + data.toLocaleDateString( 'en-GB' ,{  year : 'numeric'}));\r\n            //console.log(data.getHours() + \":\" + \"; \" + data.getDate() + \" \" + data.toLocaleDateString('en-GB' , {  month : 'long'}) );\r\n            //console.log(data.format('DD MMMM YYYY'));\r\n            //console.log(localStore.squareList);\r\n     });\r\n\r\n    \r\n    return(\r\n        <div className=\"root\">\r\n        {\r\n            (!localStore.leaderBoard && !localStore.squareList)\r\n            ? (\r\n                <h1>Loading...</h1>\r\n            )\r\n            : (\r\n                <React.Fragment>\r\n                    <div className=\"game-setings\">\r\n                    \r\n                    <select  disabled={localStore.gameStatus} onChange={localStore.changeMode}>\r\n                    <option selected   hidden>{localStore.currMode.name}</option>\r\n                        {\r\n                         Object.keys(localStore.mode).map( item => \r\n                            <option key={item} value={item}>{item}</option>)\r\n                            }\r\n                        }\r\n                    </select>\r\n\r\n\r\n                    <input  disabled={localStore.gameStatus} type=\"text\" value={String(localStore.name)} onChange={localStore.changeName}/>\r\n                    <button disabled={localStore.gameStatus} onClick={localStore.startGame}>PLAY</button>\r\n                    </div>\r\n\r\n                    <div className='game-wrapper'>\r\n                    <div className=\"field-wrapper\">\r\n\r\n                        { \r\n                           localStore.squareList && localStore.squareList.map( (item , index) => \r\n                           {\r\n                            if(item === 'nothing')\r\n                            {\r\n                             return <div data-div_id={index+1} key={index+1} onClick={localStore.changeColor} className={'field-item-' + localStore.gameClass.get(localStore.currMode.name)}></div>\r\n                            }\r\n                            else if(item === 'success')\r\n                            {\r\n                             return <div data-div_id={index+1} key={index+1} onClick={localStore.changeColor} className={'field-item-' + localStore.gameClass.get(localStore.currMode.name) + ' success'}></div>\r\n                            }\r\n                            else if(item === 'current')\r\n                            {\r\n                                return <div data-div_id={index+1} key={index+1} onClick={localStore.changeColor}className={'field-item-' + localStore.gameClass.get(localStore.currMode.name) + ' current'}></div>\r\n                            }\r\n                            else if(item === 'fail')\r\n                            {\r\n                                return <div data-div_id={index+1} key={index+1} onClick={localStore.changeColor}className={'field-item-' + localStore.gameClass.get(localStore.currMode.name) + ' fail'}></div>  \r\n                            }   \r\n                            }\r\n                           )\r\n                            \r\n                        }\r\n\r\n                    </div>\r\n\r\n                                        \r\n                    <div className=\"leader-board\">\r\n                        <h1>Leade Board</h1>\r\n                        {\r\n                        localStore.leaderBoard.slice(-10).map( (item) => (\r\n                            <div>{item.winner} : {item.date}</div>\r\n                        ))\r\n                        }\r\n\r\n                    </div>   \r\n                   \r\n                    </div>\r\n                </React.Fragment>\r\n            )\r\n    }\r\n    </div>\r\n    )\r\n\r\n});\r\n\r\nexport default Field;\r\n\r\n/*\r\n  <div className=\"root\">\r\n        {\r\n            (!localStore.leaderBoard && !localStore.squareList)\r\n            ? (\r\n                <h1>Loading...</h1>\r\n            )\r\n            : (\r\n                <React.Fragment>\r\n\r\n                    <div className=\"game-setings\">\r\n                    \r\n                    <select  disabled={localStore.gameStatus} onChange={localStore.changeMode}>\r\n                    <option selected   hidden>{localStore.currMode.name}</option>\r\n                        {\r\n                         Object.keys(localStore.mode).map( item => \r\n                            <option key={item} value={item}>{item}</option>)\r\n                            }\r\n                        }\r\n                    </select>\r\n\r\n\r\n                    <input  disabled={localStore.gameStatus} type=\"text\" value={String(localStore.name)} onChange={localStore.changeName}/>\r\n                    <button disabled={localStore.gameStatus} onClick={localStore.startGame}>PLAY</button>\r\n                    </div>\r\n\r\n                    <div className='game-wrapper'>\r\n                    <div className=\"field-wrapper\">\r\n\r\n                        { \r\n                           localStore.squareList && localStore.squareList.map( (item) => \r\n                           {\r\n                            if(item === 'nothing')\r\n                            {\r\n                             return <div data-div_id={++localStore.number} key={localStore.number} onClick={localStore.changeColor} className={'field-item-' + localStore.gameClass.get(localStore.currMode.name)}></div>\r\n                            }\r\n                            else if(item === 'success')\r\n                            {\r\n                             return <div data-div_id={++localStore.number} key={localStore.number} onClick={localStore.changeColor} className={'field-item-' + localStore.gameClass.get(localStore.currMode.name) + ' success'}></div>\r\n                            }\r\n                            else if(item === 'current')\r\n                            {\r\n                                return <div data-div_id={++localStore.number} key={localStore.number} onClick={localStore.changeColor}className={'field-item-' + localStore.gameClass.get(localStore.currMode.name) + ' current'}></div>\r\n                            }\r\n                            else if(item === 'fail')\r\n                            {\r\n                                return <div data-div_id={++localStore.number} key={localStore.number} onClick={localStore.changeColor}className={'field-item-' + localStore.gameClass.get(localStore.currMode.name) + ' fail'}></div>  \r\n                            }   \r\n                            }\r\n                           )\r\n                            \r\n                        }\r\n\r\n                    </div>\r\n\r\n                                        \r\n                    <div className=\"leader-board\">\r\n                        <h1>Leade Board</h1>\r\n                        {\r\n                        localStore.leaderBoard.map( (item) => (\r\n                            <div>{item.winner} : {item.date}</div>\r\n                        ))\r\n                        }\r\n\r\n                    </div>   \r\n                   \r\n                    </div>\r\n\r\n                    \r\n                </React.Fragment>\r\n\r\n            )\r\n    }\r\n    </div>\r\n*/\r\n/*\r\nlet gameClass = new Map();\r\nlet number = 0 ;\r\n\r\nconst Field = () => {\r\n\r\n    const [mode, setMode] = useState(undefined);      // Список режимов игры\r\n    const [name, setName] = useState(\"Player\");       // Имя игрока\r\n    const [currMode , setCurrMode] = useState({name:\"Pick game mode\"});     // Текущий режим object { name: название мода  { данные мода (количество полей . задержка)}}\r\n    const [leaderBoard, setLeaderBoard] = useState(undefined);     // Массив статистики игроков\r\n    const [squareList , setSquareList] = useState(undefined);     // Квадратики в виде массива (их статус)\r\n    const [gameStatus , setGameStatus] = useState(false);     // Статус начала игры\r\n    const [score , setScore] = useState( {player: 0 , computer: 0} ); // Статистика квадратов игрока и компютера\r\n\r\n\r\n    // Функция смены имени\r\n    const changeName = (event) =>\r\n    {\r\n        setName(event.target.value);\r\n    }\r\n\r\n    // Смена режима игры (доработать блокировку при игре)\r\n    const changeMode = (event) => {\r\n        number = 0 ;\r\n        let data = mode[event.target.value];\r\n        setCurrMode({name: event.target.value , data});\r\n        setSquareList(new Array(data.field * data.field).fill('nothing'));\r\n    }\r\n\r\n    // Старт игры (доработать блокировку при игре)\r\n    const startGame = () =>{\r\n\r\n        console.log(squareList);\r\n\r\n        if(!gameStatus && currMode.name !== \"Pick game mode\")\r\n        {\r\n        console.log(\"Start Game\");\r\n        console.log(squareList);      \r\n\r\n\r\n        setGameStatus(true);\r\n        randCurrBlock();\r\n        }\r\n        else\r\n        {\r\n            console.log(\"Error\");\r\n        }\r\n    }\r\n\r\n    // Смена цвета при клике\r\n    const changeColor = (event) => {\r\n\r\n      number = 0 ;\r\n      setSquareList(squareList.map(  (item , index) =>\r\n       {\r\n            if(String(index+1) === String(event.currentTarget.dataset.div_id) && item === 'current' )\r\n            {\r\n                CheckWinner();\r\n                setScore( {\r\n                    player: score.player+1,\r\n                    computer:score.computer \r\n                });\r\n                return 'success';\r\n            }\r\n            else\r\n            {\r\n                return item;\r\n            }\r\n          }));\r\n    }\r\n\r\n    // Проверка победителя( > 50%)\r\n    const CheckWinner = () =>\r\n    {\r\n        console.log(\"Check Winner\");\r\n\r\n        if( String(score.player + 1) === String(Math.ceil(currMode.data.field * currMode.data.field / 2)))\r\n                {\r\n                    console.log(\"KONEC IGRI IGROK WIN\");\r\n                    setGameStatus(false);\r\n\r\n                }\r\n        else if( String(score.computer + 1) === String(Math.ceil(currMode.data.field * currMode.data.field / 2)))\r\n        {\r\n            console.log(\"KONEC IGRI KOMPUTER WIN\");\r\n            setGameStatus(false);\r\n        }\r\n    }\r\n\r\n    const randCurrBlock = () =>\r\n    {\r\n        let rand = Math.floor(Math.random() * squareList.length);\r\n        while( squareList[rand] !== 'nothing')\r\n        {\r\n            rand = Math.floor(Math.random() * squareList.length);\r\n\r\n        }\r\n        console.log(rand+1);\r\n        \r\n        number = 0;\r\n        let arr = squareList.map(( (item , index) => {\r\n            if(String(index) === String(rand))\r\n            {\r\n                return 'current';\r\n            }\r\n            else\r\n            {\r\n                return item;\r\n            }\r\n        }));\r\n\r\n        setSquareList(arr);\r\n\r\n    }\r\n\r\n    const gameReactions = () =>{\r\n\r\n        //let arr = squareList.slice();\r\n        //console.log(arr);\r\n\r\n        let rand = Math.floor(Math.random() * squareList.length);\r\n        while( squareList[rand] !== 'nothing')\r\n        {\r\n            rand = Math.floor(Math.random() * squareList.length);\r\n        }\r\n\r\n\r\n         squareList.forEach( (item , index) => {\r\n            if(item === 'current')\r\n            {\r\n                CheckWinner();\r\n                setScore( () => {\r\n                    return {\r\n                    player: score.player,\r\n                    computer: score.computer + 1 \r\n                }} );\r\n            }\r\n        });\r\n\r\n        number = 0;\r\n\r\n        setSquareList(squareList.map( (item , index) => {\r\n            \r\n            if(String(index) === String(rand) &&  String(score.computer + 1) !== String(Math.ceil(currMode.data.field * currMode.data.field / 2)) )\r\n            {\r\n                return 'current';\r\n            }\r\n            else if( item === 'current')\r\n            {\r\n                return 'fail';\r\n            }\r\n            else\r\n            {\r\n                return item;\r\n            }\r\n        }));\r\n    };\r\n\r\n\r\n    useInterval(() => {\r\n        // Your custom logic here\r\n        if(gameStatus === true)\r\n         {\r\n            gameReactions();\r\n         }\r\n\r\n      }, (gameStatus === true) ? currMode.data.delay : 0);\r\n\r\n useEffect( () => {\r\nconsole.log(\"USEFFECT ARR\")\r\nconsole.log(squareList);\r\n});\r\n\r\n\r\nuseEffect(() => {\r\n\r\n    async function fetchData()\r\n    {\r\n        console.log(\"Effect first\");\r\n            let requ = await axios.get('http://starnavi-frontend-test-task.herokuapp.com/game-settings');\r\n            setMode(requ.data);\r\n\r\n            for(let key in requ.data)\r\n            {\r\n                gameClass.set(key , key);\r\n            }\r\n\r\n            requ = await axios.get('http://starnavi-frontend-test-task.herokuapp.com/winners');\r\n            setLeaderBoard(requ.data);\r\n        }\r\n        \r\n        fetchData();\r\n\r\n    } , []);\r\n\r\n    return (\r\n\r\n        <div className=\"root\">\r\n\r\n            {\r\n                (!leaderBoard && !squareList)\r\n                ? (\r\n                    <h1>Loading...</h1>\r\n                )\r\n                : (\r\n                    <React.Fragment>\r\n\r\n                        <div className=\"game-setings\">\r\n                        \r\n                        <select  disabled={gameStatus} onChange={changeMode}>\r\n                        <option selected   hidden>{currMode.name}</option>\r\n                            {\r\n                             Object.keys(mode).map( item => \r\n                                <option key={item} value={item}>{item}</option>)\r\n                                }\r\n                            }\r\n                        </select>\r\n\r\n\r\n                        <input  disabled={gameStatus} type=\"text\" value={String(name)} onChange={changeName}/>\r\n                        <button disabled={gameStatus} onClick={startGame}>PLAY</button>\r\n                        </div>\r\n\r\n                        <div className='game-wrapper'>\r\n                        <div className=\"field-wrapper\">\r\n\r\n                            { \r\n                               squareList && squareList.map( (item) => \r\n                               {\r\n                                if(item === 'nothing')\r\n                                {\r\n                                 return <div data-div_id={++number} key={number} onClick={changeColor}className={'field-item-' + gameClass.get(currMode.name)}></div>\r\n                                }\r\n                                else if(item === 'success')\r\n                                {\r\n                                 return <div data-div_id={++number} key={number} onClick={changeColor}className={'field-item-' + gameClass.get(currMode.name) + ' success'}></div>\r\n                                }\r\n                                else if(item === 'current')\r\n                                {\r\n                                    return <div data-div_id={++number} key={number} onClick={changeColor}className={'field-item-' + gameClass.get(currMode.name) + ' current'}></div>\r\n                                }\r\n                                else if(item === 'fail')\r\n                                {\r\n                                    return <div data-div_id={++number} key={number} onClick={changeColor}className={'field-item-' + gameClass.get(currMode.name) + ' fail'}></div>  \r\n                                }   \r\n                                }\r\n                               )\r\n                                \r\n                            }\r\n\r\n                        </div>\r\n\r\n                                            \r\n                        <div className=\"leader-board\">\r\n                            <h1>Leade Board</h1>\r\n                            {\r\n                            leaderBoard.map( (item) => (\r\n                                <div>{item.winner} : {item.date}</div>\r\n                            ))\r\n                            }\r\n\r\n                        </div>   \r\n                       \r\n                        </div>\r\n\r\n                        \r\n                    </React.Fragment>\r\n\r\n                )\r\n        }\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default Field;\r\n\r\n*/\r\n\r\n","import  {useRef, useEffect} from 'react';\r\n\r\n//import { fail } from 'assert';\r\n\r\n\r\nexport default function useInterval(callback, delay) {\r\n    const savedCallback = useRef();\r\n  \r\n    // Remember the latest function.\r\n    useEffect(() => {\r\n      savedCallback.current = callback;\r\n    }, [callback]);\r\n  \r\n    // Set up the interval.\r\n    useEffect(() => {\r\n      function tick() {\r\n        savedCallback.current();\r\n      }\r\n      if (delay !== null) {\r\n        let id = setInterval(tick, delay);\r\n        return () => clearInterval(id);\r\n      }\r\n    }, [delay]);\r\n  }\r\n  ","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Field from './field/Field';\n\nfunction App() {\n  return (\n    <Field />\n  );\n}\n\nexport default App;\n\n\n/*\nimport React, {useState, useEffect} from 'react';\nimport './Field.css';\nimport axios from 'axios';\n\nlet gameClass = new Map();\nlet number = 0 ;\n\nconst Field = () => {\n\n    // Список режимов игры\n    const [mode, setMode] = useState(undefined);\n   // Имя игрока\n        const [name, setName] = useState(\"Player\");\n\n    // Текущий режим object { name: название мода  { данные мода (количество полей . задержка)}}\n    const [currMode , setCurrMode] = useState({name:\"Pick game mode\"});\n\n    // Массив статистики игроков\n    const [leaderBoard, setLeaderBoard] = useState(undefined);\n\n    // Квадратики в виде массива\n    const [squareList , setSquareList] = useState(undefined);\n\n    // Статус начала игры\n    const [gameStatus , setGameStatus] = useState(false);\n\n    const changeName = (event) =>\n    {\n        setName(event);\n    }\n\n    const changeMode = (event) => {\n        console.log('CHANGE MODE')\n        \n        number = 0 ;\n        let data = mode[event.target.value];\n        setCurrMode({name: event.target.value , data});\n\n        setSquareList(\n        new Array(data.field * data.field).fill(' ').map( (item) => {\n            return <div data-div_id={++number} key={number} onClick={startGame}  className={'field-item-' + gameClass.get(event.target.value)}></div>\n        }));\n\n    }\n\n    const startGame = () =>{\n\n        console.log(\"Start Game\");\n        console.log(squareList);\n\n    }\n\n    const changeColor = () => {\n            //event\n        console.log(\"CHANGE COLOR\");\n        //console.log(event.currentTarget.dataset.div_id); \n        console.log(squareList);\n    }\n\n useEffect( () => {\n    console.log(\"EFFECT ALL\");\n    console.log(squareList);\n    setGameStatus(true);\n});\n\n\nuseEffect(() => {\n\n    async function fetchData()\n    {\n        console.log(\"Effect first\");\n            let requ = await axios.get('http://starnavi-frontend-test-task.herokuapp.com/game-settings');\n            setMode(requ.data);\n\n            for(let key in requ.data)\n            {\n                gameClass.set(key , key);\n            }\n\n            requ = await axios.get('http://starnavi-frontend-test-task.herokuapp.com/winners');\n            setLeaderBoard(requ.data);\n        }\n        \n        fetchData();\n\n    } , []);\n\n    return (\n\n        <div className=\"root\">\n\n            {\n                (!leaderBoard && !squareList)\n                ? (\n                    <h1>Loading...</h1>\n                )\n                : (\n                    <React.Fragment>\n\n                        <div className=\"game-setings\">\n                        \n                        <select  onChange={changeMode}>\n                        <option selected  hidden>{currMode.name}</option>\n                            {\n                             Object.keys(mode).map( item => \n                                <option key={item} value={item}>{item}</option>)\n                                }\n                            }\n                        </select>\n\n\n                        <input type=\"text\" value={name.toString()} onChange={changeName}/>\n                        <button onClick={startGame}>PLAY</button>\n                        </div>\n                        <div className=\"field-wrapper\">\n\n                            { \n                               squareList && squareList.map( (item) => item \n                                )\n                            }\n\n                        </div>\n                       \n                        <div className=\"leader-board-wrapper\">\n\n                        </div>\n                    </React.Fragment>\n\n                )\n        }\n\n        </div>\n    );\n}\n\nexport default Field;\n\n/*\n  leaderBoard.map( (item) => <div> \n                            <h1>{item.winner} : {item.date}</h1>\n                        </div>)\n*/\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nimport { HashRouter, Switch, Route } from 'react-router-dom'\n\nimport Field from './field/Field'\n\n\nconst Root = (\n\n    <HashRouter>\n    <Switch >\n    <Route path = \"/\" exact component = {App}/>\n    </Switch>\n  </HashRouter>\n);\nReactDOM.render( Root, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}